{"ast":null,"code":"var _jsxFileName = \"/Users/tarhanutegenov/site/My_chatgpt_app/frontend/src/TextEncrypted.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chars = \"-_~`!@#$%^&*()+=[]{}|;:,.<>?\";\nexport const TextEncrypted = ({\n  text,\n  interval = 50\n}) => {\n  _s();\n  const [outputText, setOutputText] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(false);\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n  useEffect(() => {\n    let timer;\n    if (outputText !== text) {\n      timer = setInterval(() => {\n        if (outputText.length < text.length) {\n          setOutputText(prev => prev + text[prev.length]);\n        } else {\n          clearInterval(timer);\n        }\n      }, interval);\n    }\n    return () => clearInterval(timer);\n  }, [text, interval, outputText]);\n  const remainder = outputText.length < text.length ? text.slice(outputText.length).split(\"\").map(() => chars[Math.floor(Math.random() * chars.length)]).join(\"\") : \"\";\n  if (!isMounted) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"text-white\",\n    children: [outputText, remainder]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(TextEncrypted, \"u77ArLWxIkf4NFThFWmNFvtIDzY=\");\n_c = TextEncrypted;\nvar _c;\n$RefreshReg$(_c, \"TextEncrypted\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","chars","TextEncrypted","text","interval","_s","outputText","setOutputText","isMounted","setIsMounted","timer","setInterval","length","prev","clearInterval","remainder","slice","split","map","Math","floor","random","join","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/tarhanutegenov/site/My_chatgpt_app/frontend/src/TextEncrypted.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\ninterface TextEncryptedProps {\n  text: string;\n  interval?: number;\n}\n\nconst chars = \"-_~`!@#$%^&*()+=[]{}|;:,.<>?\";\n\nexport const TextEncrypted: React.FC<TextEncryptedProps> = ({\n  text,\n  interval = 50,\n}) => {\n  const [outputText, setOutputText] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n\n    if (outputText !== text) {\n      timer = setInterval(() => {\n        if (outputText.length < text.length) {\n          setOutputText((prev) => prev + text[prev.length]);\n        } else {\n          clearInterval(timer);\n        }\n      }, interval);\n    }\n\n    return () => clearInterval(timer);\n  }, [text, interval, outputText]);\n\n  const remainder =\n    outputText.length < text.length\n      ? text\n          .slice(outputText.length)\n          .split(\"\")\n          .map(() => chars[Math.floor(Math.random() * chars.length)])\n          .join(\"\")\n      : \"\";\n\n  if (!isMounted) {\n    return <span> </span>;\n  }\n\n  return (\n    <span className=\"text-white\">\n      {outputText}\n      {remainder}\n    </span>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnD,MAAMC,KAAK,GAAG,8BAA8B;AAE5C,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAC1DC,IAAI;EACJC,QAAQ,GAAG;AACb,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACdW,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACd,IAAIY,KAAqB;IAEzB,IAAIJ,UAAU,KAAKH,IAAI,EAAE;MACvBO,KAAK,GAAGC,WAAW,CAAC,MAAM;QACxB,IAAIL,UAAU,CAACM,MAAM,GAAGT,IAAI,CAACS,MAAM,EAAE;UACnCL,aAAa,CAAEM,IAAI,IAAKA,IAAI,GAAGV,IAAI,CAACU,IAAI,CAACD,MAAM,CAAC,CAAC;QACnD,CAAC,MAAM;UACLE,aAAa,CAACJ,KAAK,CAAC;QACtB;MACF,CAAC,EAAEN,QAAQ,CAAC;IACd;IAEA,OAAO,MAAMU,aAAa,CAACJ,KAAK,CAAC;EACnC,CAAC,EAAE,CAACP,IAAI,EAAEC,QAAQ,EAAEE,UAAU,CAAC,CAAC;EAEhC,MAAMS,SAAS,GACbT,UAAU,CAACM,MAAM,GAAGT,IAAI,CAACS,MAAM,GAC3BT,IAAI,CACDa,KAAK,CAACV,UAAU,CAACM,MAAM,CAAC,CACxBK,KAAK,CAAC,EAAE,CAAC,CACTC,GAAG,CAAC,MAAMjB,KAAK,CAACkB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGpB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,CAC1DU,IAAI,CAAC,EAAE,CAAC,GACX,EAAE;EAER,IAAI,CAACd,SAAS,EAAE;IACd,oBAAOR,OAAA;MAAAuB,QAAA,EAAM;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACvB;EAEA,oBACE3B,OAAA;IAAM4B,SAAS,EAAC,YAAY;IAAAL,QAAA,GACzBjB,UAAU,EACVS,SAAS;EAAA;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEX,CAAC;AAACtB,EAAA,CA9CWH,aAA2C;AAAA2B,EAAA,GAA3C3B,aAA2C;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}