{"ast":null,"code":"var _jsxFileName = \"/Users/tarhanutegenov/site/My_chatgpt_app/frontend/src/SplitText.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SplitText = ({\n  text,\n  delay = 50\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState(\"\");\n  useEffect(() => {\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < text.length) {\n        setDisplayedText(prev => prev + text[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n      }\n    }, delay);\n    return () => clearInterval(interval);\n  }, [text, delay]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      whiteSpace: \"pre-wrap\",\n      wordBreak: \"break-word\"\n    },\n    children: displayedText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(SplitText, \"Jd13zeE1AOcNtwxOaM+TQzFRVsM=\");\n_c = SplitText;\nvar _c;\n$RefreshReg$(_c, \"SplitText\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","SplitText","text","delay","_s","displayedText","setDisplayedText","index","interval","setInterval","length","prev","clearInterval","style","whiteSpace","wordBreak","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tarhanutegenov/site/My_chatgpt_app/frontend/src/SplitText.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport const SplitText = ({ text, delay = 50 }) => {\n  const [displayedText, setDisplayedText] = useState(\"\");\n\n  useEffect(() => {\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < text.length) {\n        setDisplayedText((prev) => prev + text[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n      }\n    }, delay);\n\n    return () => clearInterval(interval);\n  }, [text, delay]);\n\n  return (\n    <span style={{ whiteSpace: \"pre-wrap\", wordBreak: \"break-word\" }}>\n      {displayedText}\n    </span>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,IAAIU,KAAK,GAAG,CAAC;IACb,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAIF,KAAK,GAAGL,IAAI,CAACQ,MAAM,EAAE;QACvBJ,gBAAgB,CAAEK,IAAI,IAAKA,IAAI,GAAGT,IAAI,CAACK,KAAK,CAAC,CAAC;QAC9CA,KAAK,EAAE;MACT,CAAC,MAAM;QACLK,aAAa,CAACJ,QAAQ,CAAC;MACzB;IACF,CAAC,EAAEL,KAAK,CAAC;IAET,OAAO,MAAMS,aAAa,CAACJ,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACN,IAAI,EAAEC,KAAK,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAMa,KAAK,EAAE;MAAEC,UAAU,EAAE,UAAU;MAAEC,SAAS,EAAE;IAAa,CAAE;IAAAC,QAAA,EAC9DX;EAAa;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEX,CAAC;AAAChB,EAAA,CAtBWH,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}