{"ast":null,"code":"var _jsxFileName = \"/Users/tarhanutegenov/site/My_chatgpt_app/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { SplitText } from \"./SplitText\"; // Import the SplitText component\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hello! How can I assist you? üòä\",\n    sender: \"bot\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false); // Dark mode state\n  const chatBoxRef = useRef(null);\n  useEffect(() => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages([...messages, userMessage]);\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"http://192.168.8.24:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      if (data.response) {\n        const botReply = {\n          text: data.response,\n          sender: \"bot\"\n        };\n        setMessages(prevMessages => [...prevMessages, botReply]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n    setInput(\"\");\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${isDarkMode ? \"dark-mode\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dark-mode-toggle\",\n        onClick: toggleDarkMode,\n        children: isDarkMode ? \"‚òÄÔ∏è\" : \"üåô\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        ref: chatBoxRef,\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === \"bot\" ? /*#__PURE__*/_jsxDEV(SplitText, {\n            text: msg.text,\n            delay: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this) // Use SplitText for bot messages\n          : msg.text // Display user messages normally\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OSfCvj5k0YmtCb/9PJc36stJZRI=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SplitText","jsxDEV","_jsxDEV","App","_s","messages","setMessages","text","sender","input","setInput","isLoading","setIsLoading","isDarkMode","setIsDarkMode","chatBoxRef","current","scrollTop","scrollHeight","sendMessage","trim","userMessage","response","fetch","method","headers","body","JSON","stringify","message","data","json","botReply","prevMessages","error","console","handleKeyPress","e","key","toggleDarkMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","map","msg","index","delay","type","value","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["/Users/tarhanutegenov/site/My_chatgpt_app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { SplitText } from \"./SplitText\"; // Import the SplitText component\nimport \"./App.css\";\n\nexport default function App() {\n  const [messages, setMessages] = useState([\n    { text: \"Hello! How can I assist you? üòä\", sender: \"bot\" },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false); // Dark mode state\n  const chatBoxRef = useRef(null);\n\n  useEffect(() => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages([...messages, userMessage]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"http://192.168.8.24:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: input }),\n      });\n\n      const data = await response.json();\n      if (data.response) {\n        const botReply = { text: data.response, sender: \"bot\" };\n        setMessages((prevMessages) => [...prevMessages, botReply]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n\n    setInput(\"\");\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return (\n    <div className={`app-container ${isDarkMode ? \"dark-mode\" : \"\"}`}>\n      {/* Sidebar */}\n      <div className=\"sidebar\">\n        <h2>Menu</h2>\n        <button>Home</button>\n        <button>Settings</button>\n        <button>Help</button>\n      </div>\n\n      {/* Chat Section */}\n      <div className=\"chat-container\">\n        <button className=\"dark-mode-toggle\" onClick={toggleDarkMode}>\n          {isDarkMode ? \"‚òÄÔ∏è\" : \"üåô\"}\n        </button>\n        <div className=\"chat-box\" ref={chatBoxRef}>\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === \"bot\" ? (\n                <SplitText text={msg.text} delay={50} /> // Use SplitText for bot messages\n              ) : (\n                msg.text // Display user messages normally\n              )}\n            </div>\n          ))}\n          {isLoading && <div className=\"message bot\">Typing...</div>}\n        </div>\n\n        <div className=\"input-box\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Type a message...\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}